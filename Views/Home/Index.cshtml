@model IEnumerable<PARKIT_enterprise_final.Models.MapPoint>
@{
    ViewData["Title"] = "Map";
}

<div class="side-bar">
    <span id="side-bar-title">Listings: @Model.Count() found</span>
    @foreach (MapPoint mapPoint in Model)
    {
        <a class="side-bar-item" href="/Booking/BookListing/@mapPoint.id">
            <div class="side-bar-item-img">
                <img src="data:image/png;base64,@mapPoint.thumbnail" alt="Listing Image" />
            </div>
            <div class="side-bar-item-info">
                <span>Street: @mapPoint.street</span>
                <span>City: @mapPoint.city</span>
                <span>Zip: @mapPoint.zip</span>
                <span>Price: $@mapPoint.price</span>
            </div>
        </a>
    }
</div>

<div id="map" class="map" />

<script>
    async function initMap() {
        // Get Google Maps API libraries
        const { Map, InfoWindow } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

        // Create the map
        var map = new Map(document.getElementById('map'), {
            zoom: 12,
            center: { lat: 43.65804053299989, lng: -79.4349384105354 },
            mapId: 'ed84065a5ae2b96e',
            disableDefaultUI: true,
        });

        // Create the list of listings to be loaded onto the map
        const listings = [
    @foreach (MapPoint mapPointPin in Model)
    {
        <text>
                {
                    id: "@mapPointPin.id",
                    position: { lat: @mapPointPin.latitude, lng: @mapPointPin.longitude },
                    title: "@mapPointPin.street",
                },
        </text>
    }
            ];

        // Create an info window to share between markers.
        const infoWindow = new InfoWindow();


        // Create the markers.
        listings.forEach((location, i) => {
            const parkingImg = document.createElement("img");
            // get from local images folder
            parkingImg.src = "/images/parking-icon.png";
            parkingImg.style.width = "40px";

            // Create a marker for each location.
            const marker = new AdvancedMarkerElement({
                position: location.position,
                map,
                content: parkingImg,
            });

            // Add a click listener for each marker, and set up the info window.
            marker.addListener("click", ({ domEvent, latLng }) => {
                const { target } = domEvent;

                infoWindow.close();
                window.location.href = "/Booking/BookListing/" + location.id;
            });
        });
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=@(ViewData["GMAP_API_KEY"])&callback=initMap" async defer></script>
